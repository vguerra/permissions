<?xml version="1.0"?>

<queryset>
    <rdbms><type>postgresql</type><version>7.1</version></rdbms>

    <fullquery name="dbqd.acs-subsite.www.site-map.index.nodes_select">
        <rdbms><type>postgresql</type><version>8.4</version></rdbms>
        <querytext>
            select package_id,
                   package_key,
                   pretty_name as package_pretty_name,
                   apm_package_type__num_parameters(package_key) as parameter_count,
                   node_id, url, parent_url, name, root_p, mylevel, object_id,
                   directory_p, parent_id, n_children,
                   p.instance_name as object_name,
                   acs_permission__permission_p(object_id, :user_id, 'admin') as object_admin_p,
           (select view_p from site_nodes_selection where node_id=site_map.node_id) as view_p
            from apm_packages p join apm_package_types using (package_key) right outer join
                 (select n.node_id,
                         site_node__url(n.node_id) as url,
                         site_node__url(n.parent_id) as parent_url,
                         n.name,
                         case when exists (select 1 from site_nodes where parent_id = n.node_id) then 1 else 0 end as n_children,
                         case when n.node_id = (select site_node__node_id('/', null)) then 1 else 0 end as root_p,
                         (tree_level(n.tree_sortkey) - (select tree_level(n2.tree_sortkey) from site_nodes n2 where n2.node_id = (select coalesce(:root_id, site_node__node_id('/', null))))) as mylevel,
                         n.object_id,
                         n.directory_p,
                         n.parent_id
                  from site_nodes n, site_nodes n2,site_nodes_selection sn
                  where (n.object_id is null
                         or acs_permission__permission_p(n.object_id, :user_id, 'read'))
                  and sn.node_id = n.node_id
                  and n2.node_id = (select coalesce(:root_id, site_node__node_id('/', null)))
                  and n.tree_sortkey between n2.tree_sortkey and tree_right(n2.tree_sortkey)
                  and (n.parent_id is null or n.parent_id in ([join $expand ", "]))) site_map
            on site_map.object_id = p.package_id
            order by url
	    </querytext>
    </fullquery>

    <fullquery name="dbqd.acs-subsite.www.site-map.index.services_select">
        <rdbms><type>postgresql</type><version>8.4</version></rdbms>
        <querytext>
            select package_id,
                   ap.package_key,
                   ap.instance_name,
                   apm_package_type__num_parameters(ap.package_key) as parameter_count
            from apm_packages ap,
                 apm_package_types
            where ap.package_key = apm_package_types.package_key
            and package_type = 'apm_service'
            and not exists (select 1 from site_nodes sn where sn.object_id = package_id)
            and acs_permission__permission_p(package_id, :user_id, 'admin')
            order by instance_name
        </querytext>
    </fullquery>


    <fullquery name="dbqd.acs-subsite.www.admin.site-map.index.nodes_select">
        <rdbms><type>postgresql</type><version>8.4</version></rdbms>
        <querytext>
            select package_id,
                   package_key,
                   pretty_name as package_pretty_name,
                   apm_package_type__num_parameters(package_key) as parameter_count,
                   node_id, url, parent_url, name, root_p, mylevel, object_id,
                   directory_p, parent_id, n_children,
                   p.instance_name as object_name,
                   acs_permission__permission_p(object_id, :user_id, 'admin') as object_admin_p
            from apm_packages p join apm_package_types using (package_key) right outer join
                 (select n.node_id,
                         site_node__url(n.node_id) as url,
                         site_node__url(n.parent_id) as parent_url,
                         n.name,
                         case when exists (select 1 from site_nodes where parent_id = n.node_id) then 1 else 0 end as n_children,
                         case when n.node_id = (select site_node__node_id('/', null)) then 1 else 0 end as root_p,
                         (tree_level(n.tree_sortkey) - (select tree_level(n2.tree_sortkey) from site_nodes n2 where n2.node_id = (select coalesce(:root_id, site_node__node_id('/', null))))) as mylevel,
                         n.object_id,
                         n.directory_p,
                         n.parent_id
                  from site_nodes n, site_nodes n2
                  where (n.object_id is null
                         or acs_permission__permission_p(n.object_id, :user_id, 'read'))
                  and n2.node_id = (select coalesce(:root_id, site_node__node_id('/', null)))
                  and n.tree_sortkey between n2.tree_sortkey and tree_right(n2.tree_sortkey)
                  and (n.parent_id is null or n.parent_id in ([join $expand ", "]))) site_map
            on site_map.object_id = p.package_id
        $where_limit
            order by url
        </querytext>
    </fullquery>

    <fullquery name="dbqd.acs-subsite.www.admin.site-map.index.services_select">
        <rdbms><type>postgresql</type><version>8.4</version></rdbms>
        <querytext>
        With apm_services AS (
            select package_id,
            ap.package_key,
            ap.instance_name,
            apm_package_type__num_parameters(ap.package_key) as parameter_count
            from apm_packages ap,
            apm_package_types
            where ap.package_key = apm_package_types.package_key
            and package_type = 'apm_service'
            and not exists (select 1 from site_nodes sn where sn.object_id = package_id)
            order by instance_name
        ) select * from apm_services where
            acs_permission__permission_p(package_id, :user_id, 'admin')
        </querytext>
    </fullquery>

    <fullquery name="dbqd.acs-subsite.www.admin.site-map.site-map.nodes_select">
        <rdbms><type>postgresql</type><version>8.4</version></rdbms>
        <querytext>
            select package_id,
                   package_key,
                   pretty_name as package_pretty_name,
                   apm_package_type__num_parameters(package_key) as parameter_count,
                   node_id, url, parent_url, name, root_p, mylevel, object_id,
                   directory_p, parent_id, n_children,
                   p.instance_name as object_name,
                   acs_permission__permission_p(object_id, :user_id, 'admin') as object_admin_p,
           (select view_p from site_nodes_selection where node_id=site_map.node_id) as view_p
            from apm_packages p join apm_package_types using (package_key) right outer join
                 (select n.node_id,
                         site_node__url(n.node_id) as url,
                         site_node__url(n.parent_id) as parent_url,
                         n.name,
                         case when exists (select 1 from site_nodes where parent_id = n.node_id) then 1 else 0 end as n_children,
                         case when n.node_id = (select site_node__node_id('/', null)) then 1 else 0 end as root_p,
                         (tree_level(n.tree_sortkey) - (select tree_level(n2.tree_sortkey) from site_nodes n2 where n2.node_id = (select coalesce(:root_id, site_node__node_id('/', null))))) as mylevel,
                         n.object_id,
                         n.directory_p,
                         n.parent_id
                  from site_nodes n, site_nodes n2
                  where (n.object_id is null
                         or acs_permission__permission_p(n.object_id, :user_id, 'read'))
                  and n2.node_id = (select coalesce(:root_id, site_node__node_id('/', null)))
                  and n.tree_sortkey between n2.tree_sortkey and tree_right(n2.tree_sortkey)
                  and (n.parent_id is null or n.parent_id in ([join $expand ", "]))) site_map
            on site_map.object_id = p.package_id
            order by url
        </querytext>
    </fullquery>

    <fullquery name="dbqd.acs-subsite.www.admin.site-map.site-map.services_select">
        <rdbms><type>postgresql</type><version>8.4</version></rdbms>
        <querytext>
            select package_id,
                   ap.package_key,
                   ap.instance_name,
                   apm_package_type__num_parameters(ap.package_key) as parameter_count
            from apm_packages ap,
                 apm_package_types
            where ap.package_key = apm_package_types.package_key
            and package_type = 'apm_service'
            and not exists (select 1 from site_nodes sn where sn.object_id = package_id)
            and acs_permission__permission_p (package_id, :user_id,'admin')
            order by instance_name
        </querytext>
    </fullquery>

    <fullquery name="dbqd.xotcl-core.lib.revisions.revisions_info">
      <rdbms><type>postgresql</type><version>8.4</version></rdbms>
      <querytext>
	select  ci.name, n.revision_id as version_id,
	person__name(n.creation_user) as author,
	n.creation_user as author_id,
	to_char(n.last_modified,'YYYY-MM-DD HH24:MI:SS') as last_modified_ansi,
	n.description,
	acs_permission__permission_p(n.revision_id,:user_id,'admin') as admin_p,
	acs_permission__permission_p(n.revision_id,:user_id,'delete') as delete_p,
	char_length(n.data) as content_size,
	content_revision__get_number(n.revision_id) as version_number
	from cr_revisionsi n, cr_items ci
	where ci.item_id = n.item_id and ci.item_id = :page_id
        and acs_permission__permission_p(n.revision_id, :user_id, 'read')
	order by n.revision_id desc
      </querytext>
    </fullquery>
    
    <fullquery name="dbqd.tsearch2-driver.tcl.tsearch2-driver-procs.callback::search::search::impl::tsearch2-driver.base_query">
      <rdbms><type>postgresql</type><version>8.4</version></rdbms>
      <querytext>
	where fti @@ to_tsquery(:query)
      </querytext>
    </fullquery>
    
    <fullquery name="dbqd.tsearch2-driver.tcl.tsearch2-driver-procs.callback::search::search::impl::tsearch2-driver.search">
      <rdbms><type>postgresql</type><version>8.4</version></rdbms>
      <querytext>
	select distinct(orig_object_id) from acs_permission__permission_p_recursive_array(array(
        select txt.object_id
        from
        [join $from_clauses ","]
        $base_query
        [expr {[llength $where_clauses] > 0 ? " and " : ""}]
        [join $where_clauses " and "]
        order by ts_rank(fti,to_tsquery(:query)) desc
	), :user_id, 'read')
        $limit_clause $offset_clause
      </querytext>
    </fullquery>
    
    <fullquery name="dbqd.tsearch2-driver.tcl.tsearch2-driver-procs.callback::search::search::impl::tsearch2-driver.search_result_count">
      <rdbms><type>postgresql</type><version>8.4</version></rdbms>
      <querytext>
        select count(distinct(orig_object_id)) from acs_permission__permission_p_recursive_array(array(
        select txt.object_id
        from
        [join $from_clauses ","]
        $base_query
        [expr {[llength $where_clauses] > 0 ? " and " : ""}]
        [join $where_clauses " and "]
      ), :user_id, 'read')
      </querytext>
    </fullquery>
    
    <fullquery name="dbqd.file-storage.tcl.file-storage-procs.fs::get_folder_objects.select_folder_contents">
      <rdbms><type>postgresql</type><version>8.4</version></rdbms>
      <querytext>
	
        select cr_items.item_id as object_id,
        cr_items.name
        from cr_items
        where cr_items.parent_id = :folder_id
        and acs_permission__permission_p(cr_items.item_id, :user_id, 'read')
	
      </querytext>
    </fullquery>
    

    <fullquery name="dbqd.file-storage.tcl.file-storage-procs.fs::get_folder_contents.select_folder_contents">
      <rdbms><type>postgresql</type><version>8.4</version></rdbms>
      <querytext>
	
        select fs_objects.object_id,
        fs_objects.name,
        fs_objects.title,
        fs_objects.live_revision,
        fs_objects.type,
        to_char(fs_objects.last_modified, 'YYYY-MM-DD HH24:MI:SS') as last_modified_ansi,
        fs_objects.content_size,
        fs_objects.url,
        fs_objects.key,
        fs_objects.sort_key,
        fs_objects.file_upload_name,
        fs_objects.title,
        case when fs_objects.last_modified >= (now() - interval '$n_past_days days') then 1 else 0 end as new_p,
        acs_permission__permission_p(fs_objects.object_id, :user_id, 'admin') as admin_p,
        acs_permission__permission_p(fs_objects.object_id, :user_id, 'delete') as delete_p,
        acs_permission__permission_p(fs_objects.object_id, :user_id, 'write') as write_p
        from fs_objects
        where fs_objects.parent_id = :folder_id
        and acs_permission__permission_p(fs_objects.object_id, :user_id, 'read')
        order by fs_objects.sort_key, fs_objects.name
	
      </querytext>
    </fullquery>
    

    <fullquery name="dbqd.file-storage.tcl.file-storage-procs.fs_get_folder_size.folder_size">
      <rdbms><type>postgresql</type><version>8.4</version></rdbms>
      <querytext>
        With RECURSIVE revisions AS (
        select item_id
        from cr_items
        where parent_id = :folder_id
        UNION ALL
        select ci.item_id
        from cr_items ci, revisions rs
        where ci.parent_id = rs.item_id
        )
        select COALESCE(sum(content_length),0) from cr_revisions where item_id in (select item_id from revisions);
      </querytext>
    </fullquery>
    
    <fullquery name="dbqd.file-storage.www.folder-chunk.select_folder_contents">
    <rdbms><type>postgresql</type><version>8.4</version></rdbms>
        <querytext>

            select fs_objects.object_id,
                   fs_objects.mime_type,
                   fs_objects.name,
                   fs_objects.live_revision,
                   fs_objects.type,
                   fs_objects.pretty_type,
                   to_char(fs_objects.last_modified, 'YYYY-MM-DD HH24:MI:SS') as last_modified_ansi,
                   fs_objects.content_size,
                   fs_objects.url,
                   fs_objects.sort_key,
                   -fs_objects.sort_key as sort_key_desc,
                   fs_objects.file_upload_name,
                   fs_objects.title,
                   case
                     when :folder_path is null
                     then fs_objects.file_upload_name
                     else :folder_path || fs_objects.file_upload_name
                   end as file_url,
                   case
                     when fs_objects.last_modified >= (now() - cast('$n_past_days days' as interval))
                     then 1
                     else 0
                   end as new_p,
                   case
                    when fs_objects.type = 'folder' then
                        (select description from cr_folders where folder_id = fs_objects.object_id)
                    when fs_objects.type = 'url' then
                        (select description from cr_extlinks where extlink_id = fs_objects.object_id)
                   else
                       (select description from cr_revisions where revision_id = fs_objects.live_revision)
                   end as description
            from fs_objects
            where fs_objects.parent_id = :folder_id
              and acs_permission__permission_p(fs_objects.object_id, :viewing_user_id,'read')
        $orderby
        </querytext>
    </fullquery>

    <fullquery name="dbqd.file-storage.www.file.version_info">
      <rdbms><type>postgresql</type><version>8.4</version></rdbms>
      <querytext>

    select  r.title,
            r.revision_id as version_id,
            person__name(o.creation_user) as author,
                o.creation_user as author_id,
            r.mime_type as type,
            m.label as pretty_type,
                to_char(o.last_modified,'YYYY-MM-DD HH24:MI:SS') as last_modified_ansi,
            r.description,
            acs_permission__permission_p(r.revision_id,:user_id,'admin') as admin_p,
            acs_permission__permission_p(r.revision_id,:user_id,'delete') as delete_p,
            coalesce(r.content_length,0) as content_size
    from   acs_objects o, cr_items i,cr_revisions r
            left join cr_mime_types m on r.mime_type=m.mime_type
    where o.object_id = r.revision_id
      and r.item_id = i.item_id
      and r.item_id = :file_id
          and acs_permission__permission_p(r.revision_id, :user_id, 'read')
    $show_versions order by last_modified desc

      </querytext>
    </fullquery>

  <fullquery name="dbqd.file-storage.www.move.get_folder_tree">
    <rdbms><type>postgresql</type><version>8.4</version></rdbms>
    <querytext>
    With folder_tree as (
        select
        cf.folder_id, ci1.parent_id, cf.label, tree_level(ci1.tree_sortkey) as level_num, acs_permission__permission_p(cf.folder_id, :user_id, 'write') as permission_p
        from cr_folders cf, cr_items ci1, cr_items ci2
        where
        ci1.tree_sortkey between ci2.tree_sortkey and
        tree_right(ci2.tree_sortkey)
        and ci2.item_id= :root_folder_id
        and ci1.item_id=cf.folder_id
        order by ci1.tree_sortkey, cf.label
    ) select folder_id, parent_id, label, level_num from folder_tree where permission_p is true;
    </querytext>
  </fullquery>

  <fullquery name="dbqd.file-storage.www.copy.get_folder_tree">
    <rdbms><type>postgresql</type><version>8.4</version></rdbms>
    <querytext>
    With folder_tree as (
        select
        cf.folder_id, ci1.parent_id, cf.label, tree_level(ci1.tree_sortkey) as level_num, acs_permission__permission_p(cf.folder_id, :user_id, 'write') as permission_p
        from cr_folders cf, cr_items ci1, cr_items ci2
        where
        ci1.tree_sortkey between ci2.tree_sortkey and
        tree_right(ci2.tree_sortkey)
        and ci2.item_id= :root_folder_id
        and ci1.item_id=cf.folder_id
        order by ci1.tree_sortkey, cf.label
    ) select folder_id, parent_id, label, level_num from folder_tree where permission_p is true;
    </querytext>
  </fullquery>

  <fullquery name="dbqd.notifications.tcl.sweep-procs.notification::sweep::cleanup_notifications.select_invalid_request_ids">
      <rdbms><type>postgresql</type><version>8.4</version></rdbms>
      <querytext>
         select request_id
           from notification_requests
          where acs_permission__permission_p(object_id, user_id, 'read') is false;
      </querytext>
  </fullquery>

</queryset>
